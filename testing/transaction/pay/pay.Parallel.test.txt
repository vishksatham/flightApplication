# Two users in two terminals, one books and pays for a a specific itinerary and the other tries to book that specific booking but fails. 
# Test case demonstrates parallelism by showing the program is capable of managing concurrent booking/payment
# without resulting in cross transactional conflicts (Written Test Case) (REVISED)

# commands/input for terminal 1:
create user1 user1 500
login user1 user1
search "Seattle WA" "Boston MA" 1 1 1
book 0
pay 1
quit
*

# Scenario 1
Created user user1
Logged in as user1
Itinerary 0: 1 flight(s), 297 minutes
ID: 60454 Day: 1 Carrier: AS Number: 24 Origin: Seattle WA Dest: Boston MA Duration: 297 Capacity: 14 Price: 140
Booked flight(s), reservation ID: 1
Paid reservation: 1 remaining balance: 360
Goodbye
|
# Scenario 2
Created user user1
Logged in as user1
Itinerary 0: 1 flight(s), 297 minutes
ID: 60454 Day: 1 Carrier: AS Number: 24 Origin: Seattle WA Dest: Boston MA Duration: 297 Capacity: 14 Price: 140
Booking failed
Cannot find unpaid reservation 1 under user: user1
Goodbye
*

##################### Terminal 2: #####################

# commands/input:
create user2 user2 5000
login user2 user2
search "Seattle WA" "Boston MA" 1 1 1
book 0
pay 1
quit
*

# Scenario 1
Created user user2
Logged in as user2
Itinerary 0: 1 flight(s), 297 minutes
ID: 60454 Day: 1 Carrier: AS Number: 24 Origin: Seattle WA Dest: Boston MA Duration: 297 Capacity: 14 Price: 140
Booking failed
Cannot find unpaid reservation 1 under user: user2
Goodbye
|
# Scenario 2
Created user user2
Logged in as user2
Itinerary 0: 1 flight(s), 297 minutes
ID: 60454 Day: 1 Carrier: AS Number: 24 Origin: Seattle WA Dest: Boston MA Duration: 297 Capacity: 14 Price: 140
Booked flight(s), reservation ID: 1
Paid reservation: 1 remaining balance: 4860
Goodbye
*